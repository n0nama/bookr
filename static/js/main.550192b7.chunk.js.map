{"version":3,"sources":["actions/index.js","components/BookForm.js","components/BookShelf.js","components/app.js","reducers/BookFormReducer.js","reducers/index.js","index.js"],"names":["ADD_BOOK","DELETE_BOOK","EDIT_BOOK","SORT_BOOKS","addNewBook","book","type","editBook","id","deleteBook","sortBooks","order","XRegExp","require","addValidationRule","values","value","lowDate","Date","currentDate","split","dd","mm","yyyy","inputedDate","length","currentYear","getFullYear","inputedYear","parseInt","BookForm","state","modal","preview","authors","authorsPreSet","formWasSubmitted","formEditing","newAuthAdded","show","e","preventDefault","setState","close","imagePreview","link","target","authorsListChange","selectedAuthors","addNewAuthor","newAuthName","authorFirstName","authorLastName","updatedAuthors","key","text","updateSelectedAuthors","concat","undefined","submitNewBook","props","books","editedBook","maxid","data","map","b","maxidHelper","new_book","refs","bookForm","reset","allAuthors","this","Set","flat","filter","el","a","prevProps","console","log","errorLabel","Label","basic","color","pointing","Grid","Row","Column","mobile","largeScreen","table","onValidSubmit","ref","className","Field","Input","required","label","placeholder","name","validations","maxLength","validationErrors","isDefaultRequiredValue","Group","width","fluid","multiple","search","selection","options","onChange","Button","icon","onClick","matchRegexp","validationError","Modal","open","onClose","centered","size","Header","Content","only","Image","bordered","rounded","onError","src","thumbnailUrl","check","Component","connect","dispatch","bindActionCreators","BookShelf","deletingBookID","showEdit","window","scrollTo","Menu","Item","header","Icon","handleItemClick","Divider","Card","stackable","itemsPerRow","wrapped","ui","title","Meta","publisher","yearPublish","Description","publishedDate","pageCount","isbn","extra","editBookHandler","Actions","negative","positive","labelPosition","content","deleteBookHandler","App","Container","padded","books_json","action","slice","sort","rootReducer","combineReducers","store","applyMiddleware","save","createStore","createStoreWithMiddleware","load","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.550192b7.chunk.js","sourcesContent":["export const ADD_BOOK = 'ADD_BOOK';\r\nexport const DELETE_BOOK = 'DELETE_BOOK';\r\nexport const EDIT_BOOK = 'EDIT_BOOK';\r\nexport const SORT_BOOKS = 'SORT_BOOKS'\r\n\r\nexport function addNewBook(book) {\r\n    const action = {\r\n        type: ADD_BOOK,\r\n        book\r\n    }\r\n    return action;\r\n}\r\n\r\nexport function editBook(id) {\r\n    const action = {\r\n        type: EDIT_BOOK,\r\n        id\r\n    }\r\n    return action;\r\n}\r\n\r\nexport function deleteBook(id) {\r\n    const action = {\r\n        type: DELETE_BOOK,\r\n        id\r\n    }\r\n    return action;\r\n}\r\n\r\nexport function sortBooks(order) {\r\n    const action = {\r\n        type: SORT_BOOKS,\r\n        order\r\n    }\r\n    return action;\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { addNewBook } from '../actions';\r\nimport { Grid, Modal, Image, Button, Label } from 'semantic-ui-react';\r\nimport { Form, Dropdown } from 'formsy-semantic-ui-react';\r\nimport { addValidationRule } from 'formsy-react';\r\nconst XRegExp = require('xregexp');\r\n\r\n//Custom date validation\r\naddValidationRule('isCorrectDate', function(values, value) {\r\n        let lowDate = new Date(\"01.01.1800\")\r\n        let currentDate = new Date()\r\n        let [dd, mm, yyyy] = value ? value.split('.') : [\"01\", \"01\", \"1900\"]\r\n        let inputedDate = new Date(mm + '.' + dd + '.' + yyyy)\r\n        if ((inputedDate >= lowDate && inputedDate <= currentDate) || inputedDate.length > 0){\r\n            return true\r\n        }\r\n});\r\n\r\naddValidationRule('isCorrectYear', function(values, value) {\r\n    let lowYear = 1800\r\n    let currentYear = new Date().getFullYear();\r\n    let inputedYear = parseInt(value)\r\n    if (value && value.length > 0){\r\n        if ((inputedYear>=lowYear&&inputedYear<=currentYear)){\r\n            return true\r\n        } else {\r\n            return false\r\n        } \r\n    } else {\r\n        return true\r\n    }\r\n\r\n});\r\n\r\nfunction maxidHelper(data){\r\n    let maxid = 0;\r\n    data.map(b => {\r\n        if (b.id > maxid) {\r\n            return maxid = b.id\r\n        };\r\n        return null;\r\n    });\r\n    return maxid;\r\n}\r\n\r\nclass BookForm extends Component {\r\n    state = { modal: false,\r\n        preview : '',\r\n        authors : this.authorsPreSet (),\r\n        formWasSubmitted : false,\r\n        formEditing : false,\r\n        newAuthAdded : false\r\n    }\r\n    static getDerivedStateFromProps(props, state) {\r\n        let check = props.books.editedBook ? true : false\r\n        if (check !== state.formEditing) {\r\n            return {\r\n                formEditing: check,\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    show = (e) => {\r\n        e.preventDefault()//To prevent premature form validation\r\n        this.setState({ modal: true })\r\n    }\r\n    close = () => { \r\n        this.setState({ modal: false }) \r\n    }\r\n    imagePreview = (link) => { \r\n        this.setState({preview : link.target.value })\r\n    }\r\n    authorsPreSet () {\r\n            /* Here I prepare list of all authors to render it in select.\r\n           I grub all books, then map all authors from each book.\r\n           Then I prepare flat array to use it in single dimension.\r\n           After that I remove all duplicates using Set, and then\r\n           I map current array to use it with select.\r\n        */\r\n        let allAuthors = this.props.books.data.map(book => {\r\n            return book.authors            \r\n        });\r\n        let preAuth = [...new Set(allAuthors.flat(1))].filter( el => el.length > 0); //clear empty elements if exists\r\n        let options = preAuth.map( a => {\r\n            return (\r\n                {key : a, text: a, value: a }\r\n            )\r\n        });\r\n        return options\r\n    }\r\n    authorsListChange =  (e, { value }) => {\r\n        this.setState({ selectedAuthors: value, formWasSubmitted : false })\r\n    }\r\n    addNewAuthor = (e) => {\r\n        let newAuthName = e.authorFirstName + ' ' + e.authorLastName\r\n        let newAddition = { key : newAuthName, text : newAuthName, value : newAuthName }\r\n        let updatedAuthors = [newAddition, ...this.state.authors]\r\n        //This statement needs to fix custom validation behavior\r\n        if (this.state.formWasSubmitted && !this.state.formEditing) {\r\n            let selectedAuthors = []\r\n            if(this.state.newAuthAdded){\r\n                selectedAuthors = this.state.selectedAuthors\r\n            }\r\n            let updateSelectedAuthors = selectedAuthors.concat(newAuthName)\r\n            this.setState({ modal: false, authors : updatedAuthors, selectedAuthors : updateSelectedAuthors, newAuthAdded : true })\r\n        } else {\r\n            let selectedAuthors = this.state.selectedAuthors === undefined ? [] : this.state.selectedAuthors\r\n            let updateSelectedAuthors = selectedAuthors.concat(newAuthName)\r\n            this.setState({ modal: false, authors : updatedAuthors, selectedAuthors : updateSelectedAuthors })\r\n        }\r\n    }\r\n    submitNewBook = (e) => {\r\n        //Prepare new id\r\n        if (!this.state.formEditing) {\r\n            let maxid = maxidHelper(this.props.books.data)\r\n            e.id = maxid+1\r\n        } else {\r\n            e.id = this.props.books.editedBook.id\r\n        }\r\n        let new_book = e\r\n        this.props.addNewBook(new_book)\r\n        this.refs.bookForm.reset()\r\n        this.setState({formWasSubmitted : true, preview : '', newAuthAdded : false})//To clear selectedAuthors list\r\n    }\r\n    componentDidUpdate(prevProps){\r\n        if ( prevProps.books.editedBook !== this.props.books.editedBook) {\r\n            if(this.props.books.editedBook){\r\n                this.setState({selectedAuthors : this.props.books.editedBook.authors})\r\n            }\r\n            this.refs.bookForm.reset(this.props.books.editedBook);\r\n            this.setState({formWasSubmitted : true})\r\n        }\r\n    }\r\n    render () {\r\n        //For yearPublish validation\r\n        console.log('State', this.state)\r\n        const errorLabel = <Label basic color=\"red\" pointing/>\r\n        return (\r\n            <Grid.Row>\r\n            <Grid.Column mobile={16} largeScreen={10} table={10}>\r\n            <Form\r\n                onValidSubmit={this.submitNewBook}\r\n                ref=\"bookForm\"\r\n                className=\"raised segment\"\r\n            >\r\n                <Form.Field>\r\n                    <Form.Input\r\n                        required\r\n                        label=\"Title\"\r\n                        placeholder=\"Title\"\r\n                        name=\"title\"\r\n                        validations={{maxLength : 30 }}\r\n                        validationErrors={{ \r\n                            maxLength: 'Max length 30 characters',\r\n                            isDefaultRequiredValue: 'Required field' }}\r\n                        errorLabel={ errorLabel }\r\n                    />\r\n                    <Form.Group>\r\n                        <Form.Field required width={14}>\r\n                            <label>List of authors</label>\r\n                            <Dropdown\r\n                                required\r\n                                placeholder=\"Authors\"\r\n                                name=\"authors\"\r\n                                fluid\r\n                                multiple\r\n                                search\r\n                                selection\r\n                                options={ this.state.authors }\r\n                                validationErrors={{ \r\n                                    isDefaultRequiredValue: 'Please add at least one author' }}\r\n                                errorLabel={ errorLabel }\r\n                                value={this.state.selectedAuthors}\r\n                                onChange={this.authorsListChange}\r\n                            />\r\n                        </Form.Field>\r\n                        <Form.Field width={2}>\r\n                            <label>&nbsp;</label>\r\n                            <Button color=\"brown\" icon=\"plus\" onClick={this.show}/>\r\n                        </Form.Field>                \r\n                    </Form.Group>\r\n                    <Form.Input \r\n                        label=\"Publisher\"\r\n                        placeholder=\"Name\"\r\n                        name=\"publisher\"\r\n                        validations={{maxLength : 30 }}\r\n                        validationErrors={{ \r\n                            maxLength: 'Max length 30 characters'}}\r\n                        errorLabel={ errorLabel }\r\n                    />\r\n                    <Form.Group>\r\n                        <Form.Input\r\n                            required\r\n                            label=\"Pages\"\r\n                            placeholder=\"Page count\"\r\n                            name=\"pageCount\"\r\n                            width={5}\r\n                            validations={{matchRegexp : XRegExp('^(?:[1-9][0-9]{0,3}?|10000)$') }}\r\n                            validationErrors={{ \r\n                                matchRegexp: 'Wrong format. Available from 0 to 10000',\r\n                                isDefaultRequiredValue: 'Required field' }}\r\n                            errorLabel={ errorLabel }\r\n                        />\r\n                        <Form.Input\r\n                            label=\"Year\"\r\n                            placeholder=\"For example, 2003\"\r\n                            name=\"yearPublish\"\r\n                            width={5}\r\n                            validations=\"isCorrectYear\"\r\n                            validationError=\"Wrong date format.\"\r\n                            errorLabel={ errorLabel }\r\n                        />\r\n                        <Form.Input\r\n                            label=\"Published date\"\r\n                            placeholder=\"Format dd.mm.yyyy\"\r\n                            name=\"publishedDate\"\r\n                            width={6}\r\n                            validations=\"isCorrectDate\"\r\n                            validationError=\"Wrong date format.\"\r\n                            errorLabel={ errorLabel }\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Input\r\n                        label=\"ISBN\"\r\n                        placeholder=\"ISBN\"\r\n                        name='isbn'\r\n                        validations={{matchRegexp : XRegExp('^(?:ISBN(?:-1[03])?:? )?(?=[0-9X]{10}$|(?=(?:[0-9]+[- ]){3})[- 0-9X]{13}$|97[89][0-9]{10}$|(?=(?:[0-9]+[- ]){4})[- 0-9]{17}$)(?:97[89][- ]?)?[0-9]{1,5}[- ]?[0-9]+[- ]?[0-9]+[- ]?[0-9X]$') }}\r\n                        validationErrors={{ matchRegexp: 'Wrong ISBN format.'}}\r\n                        errorLabel={ errorLabel }\r\n                    />\r\n                    <Form.Input\r\n                        label=\"Image link\"\r\n                        placeholder=\"URL\"\r\n                        onChange={this.imagePreview}\r\n                        name=\"thumbnailUrl\"/>\r\n                </Form.Field>\r\n                <Button type=\"submit\" color=\"brown\">Add</Button>\r\n            </Form>\r\n            <Modal open={this.state.modal} onClose={this.close} centered={false} size=\"mini\">\r\n                <Modal.Header>Add new author</Modal.Header>\r\n                    <Modal.Content>\r\n                        <Form onValidSubmit={this.addNewAuthor}>\r\n                            <Form.Input\r\n                                required\r\n                                label=\"First name\"\r\n                                name=\"authorFirstName\"\r\n                                validations={{maxLength : 20 }}\r\n                                validationErrors={{ \r\n                                    maxLength: 'Max length 20 characters',\r\n                                    isDefaultRequiredValue: 'Required field' }}\r\n                                errorLabel={ errorLabel }\r\n                            />\r\n                            <Form.Input\r\n                                required\r\n                                label=\"Last name\"\r\n                                name=\"authorLastName\"\r\n                                validations={{maxLength : 20 }}\r\n                                validationErrors={{ \r\n                                    maxLength: 'Max length 20 characters',\r\n                                    isDefaultRequiredValue: 'Required field' }}\r\n                                errorLabel={ errorLabel }\r\n                            />\r\n                            <Button type=\"submit\" color=\"brown\">Add</Button>\r\n                        </Form>\r\n                    </Modal.Content>\r\n                </Modal>\r\n            </Grid.Column>\r\n            <Grid.Column width={6} only='large screen'>\r\n                <br></br>\r\n                <Image\r\n                    fluid\r\n                    bordered\r\n                    rounded\r\n                    onError={(e)=>{e.target.src=\"./assets/imgs/default.png\"}}\r\n                    src={ this.props.books.editedBook && this.props.books.editedBook.thumbnailUrl !== undefined ? this.props.books.editedBook.thumbnailUrl : this.state.preview ? this.state.preview : \"./assets/imgs/default.png\"}/>\r\n            </Grid.Column>\r\n        </Grid.Row>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n    return {\r\n        books : state.books\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch){\r\n    return bindActionCreators({addNewBook}, dispatch);\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(BookForm);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { editBook, deleteBook, sortBooks } from '../actions';\r\nimport { Grid, Card, Image, Label, Button, Icon, Menu, Divider, Modal } from 'semantic-ui-react';\r\n\r\nclass BookShelf extends Component {\r\n    state = { open: false, deletingBookID: '', showEdit : true }\r\n    show = (id) => this.setState({ open: true, deletingBookID : id })\r\n    close = () => this.setState({ open: false, deletingBookID : '' })\r\n    deleteBookHandler (id) {\r\n        this.props.deleteBook(id);\r\n        this.setState({ open: false})\r\n    }\r\n    editBookHandler (id) {\r\n        this.props.editBook(id)\r\n        this.setState({ showEdit : false })\r\n        window.scrollTo(0,0)\r\n    }\r\n    componentDidUpdate(prevProps){\r\n        if ( this.props.books.data.length - prevProps.books.data.length === 1) {\r\n            this.setState({showEdit : true}) //example calling redux action\r\n        }\r\n    }\r\n    render () {\r\n        return (\r\n            <Grid.Row>\r\n            <Grid.Column width={16}>\r\n                <Menu text>\r\n                    <Menu.Item header>SORT</Menu.Item>\r\n                        <Menu.Item>|</Menu.Item>\r\n                        <Menu.Item><Icon name=\"angle up\" onClick={() => this.props.sortBooks('TitleASC')}></Icon></Menu.Item>\r\n                        <Menu.Item\r\n                            name='Title'\r\n                            onClick={this.handleItemClick}\r\n                        />\r\n                        <Menu.Item><Icon name=\"angle down\" onClick={() => this.props.sortBooks('TitleDESC')}></Icon></Menu.Item>\r\n                        <Menu.Item>|</Menu.Item>\r\n                        <Menu.Item><Icon name=\"angle up\" onClick={() => this.props.sortBooks('YearASC')}></Icon></Menu.Item>\r\n                        <Menu.Item\r\n                            name='Year'\r\n                            onClick={this.handleItemClick}\r\n                        />\r\n                        <Menu.Item><Icon name=\"angle down\" onClick={() => this.props.sortBooks('YearDESC')}></Icon></Menu.Item>\r\n                        <Menu.Item>|</Menu.Item>\r\n                </Menu>\r\n            </Grid.Column>\r\n            <Grid.Column width={16}>\r\n                <Divider />\r\n            </Grid.Column>\r\n            <Grid.Column width={16}>\r\n                <Card.Group stackable itemsPerRow={3}>\r\n                    {this.props.books.data.map( (book) => {\r\n                        return (\r\n                            <Card key={book.id}>\r\n                                <Image src={book.thumbnailUrl ? book.thumbnailUrl : \"./assets/imgs/default.png\"} wrapped ui={false} />\r\n                                <Card.Content>\r\n                                <Card.Header>{book.title}</Card.Header>\r\n                                <Card.Meta>\r\n                                    {book.publisher}<br></br>\r\n                                    {book.yearPublish}\r\n                                </Card.Meta>\r\n                                </Card.Content>\r\n                                <Card.Content>\r\n                                <Card.Description>\r\n                                    {book.authors.map(a => {\r\n                                        return <Label key={a}>{a}</Label>\r\n                                    })}\r\n                                </Card.Description>\r\n                                <Card.Description>\r\n                                    <br></br>\r\n                                    {book.publishedDate ? <p><b>Date: </b> {book.publishedDate}</p> : null}\r\n                                    <p><b>Pages: </b> {book.pageCount}</p>\r\n                                    {book.isbn ? <p><b>ISBN: </b> {book.isbn}</p> : null}\r\n                                </Card.Description>\r\n                                </Card.Content>\r\n                                {this.state.showEdit ? \r\n                                <Card.Content extra>\r\n                                    \r\n                                    <Button basic icon color='green' onClick={() => this.editBookHandler(book.id)}>\r\n                                        <Icon name=\"pencil\"></Icon>\r\n                                    </Button>\r\n                                    <Button basic icon color='red' onClick={() => this.show(book.id)}>\r\n                                        <Icon name=\"close\"></Icon>\r\n                                    </Button>\r\n                                </Card.Content>\r\n                                : null }\r\n                            </Card>\r\n                        )\r\n                    })}\r\n                </Card.Group>\r\n            </Grid.Column>\r\n            <Modal size=\"mini\" open={this.state.open} onClose={this.close}>\r\n                <Modal.Header>Delete book</Modal.Header>\r\n                <Modal.Content>\r\n                    <p>Are you sure you want to delete this book?</p>\r\n                </Modal.Content>\r\n                <Modal.Actions>\r\n                    <Button negative onClick={this.close}>No</Button>\r\n                    <Button positive icon='checkmark' labelPosition='right' content='Yes' onClick={() => this.deleteBookHandler(this.state.deletingBookID)}/>\r\n                </Modal.Actions>\r\n            </Modal>\r\n            </Grid.Row>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n    return {\r\n        books : state.books\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch){\r\n    return bindActionCreators({deleteBook, editBook, sortBooks}, dispatch);\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BookShelf);","import React, { Component } from 'react';\r\nimport { Grid, Container } from 'semantic-ui-react';\r\n\r\nimport BookForm from './BookForm';\r\nimport BookShelf from './BookShelf';\r\n\r\nclass App extends Component {\r\n    render () {\r\n        return (\r\n            <Container>\r\n                <Grid padded className=\"segment\">\r\n                    <BookForm></BookForm>\r\n\r\n                    <BookShelf></BookShelf>\r\n                </Grid>\r\n            </Container>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default App;","import books_json from '../data/books.json';\r\nimport { ADD_BOOK, EDIT_BOOK, DELETE_BOOK, SORT_BOOKS } from '../actions';\r\n\r\n\r\nfunction books(state = books_json, action) {\r\n    let data = state.data ? state.data : state\r\n    let editedBook = null\r\n    switch(action.type){\r\n        case ADD_BOOK:\r\n            data = [action.book, ...state.data];\r\n            return {data, editedBook};\r\n        case EDIT_BOOK:\r\n            data = state.data.filter( el => el.id !== action.id);\r\n            editedBook = state.data.filter( el => el.id === action.id)[0]\r\n            return {data, editedBook};\r\n        case DELETE_BOOK:\r\n            data = state.data.filter( el => el.id !== action.id)\r\n            return {data, editedBook};\r\n        case SORT_BOOKS:\r\n            switch(action.order){\r\n                case 'TitleASC':\r\n                    data = state.data.slice().sort(function(a, b){\r\n                        if(a.title < b.title) { return -1; }\r\n                        if(a.title > b.title) { return 1; }\r\n                        return 0;\r\n                    })\r\n                    return {data, editedBook};\r\n                case 'TitleDESC':\r\n                    data = state.data.slice().sort(function(a, b){\r\n                        if(a.title > b.title) { return -1; }\r\n                        if(a.title < b.title) { return 1; }\r\n                        return 0;\r\n                    })\r\n                    return {data, editedBook};\r\n                case 'YearASC':\r\n                    data = state.data.slice().sort(function(a, b){\r\n                        return a.yearPublish - b.yearPublish;\r\n                    })\r\n                    return {data, editedBook};\r\n                case 'YearDESC':\r\n                    data = state.data.slice().sort(function(a, b){\r\n                        return b.yearPublish - a.yearPublish;\r\n                    })\r\n                    return {data, editedBook};\r\n                default:\r\n                    return {data, editedBook};\r\n            }\r\n        default:\r\n            return {data, editedBook};\r\n    }\r\n}\r\n\r\nexport default books;","import { combineReducers } from 'redux';\nimport books from './BookFormReducer';\n//import BookShelfReducer from './BookShelfReducer';\n\nconst rootReducer = combineReducers({\n    books\n})\n\nexport default rootReducer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/app';\r\n\r\nimport { Provider } from 'react-redux';\r\nimport { applyMiddleware, createStore } from \"redux\";\r\nimport { save, load } from \"redux-localstorage-simple\"\r\n\r\nimport rootReducer from './reducers';\r\n\r\nconst createStoreWithMiddleware = applyMiddleware(save())(createStore)\r\nconst store = createStoreWithMiddleware(rootReducer,load())\r\n\r\n//const store = createStore(rootReducer);\r\n\r\nReactDOM.render(\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n        ,document.getElementById('root'));"],"sourceRoot":""}